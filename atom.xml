<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小小屋</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-28T01:38:12.826Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JayJZ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>go编程之面向接口</title>
    <link href="http://yoursite.com/2018/07/18/go%E7%BC%96%E7%A8%8B%E4%B9%8B%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3/"/>
    <id>http://yoursite.com/2018/07/18/go编程之面向接口/</id>
    <published>2018-07-18T01:32:08.000Z</published>
    <updated>2018-07-28T01:38:12.826Z</updated>
    
    <content type="html"><![CDATA[<p>接触golang这门语言差不多有3个多月了。初上手时,光语法带给我的感觉和python很像,但又带点java的影子,接触了一段时间之后，逐渐发现这门语言的有趣之处,其中的面向接口编程算是较明显的一点。<br><a id="more"></a><br>接口这概念在java中就有存在,作用是定义了一个对象的（一组）行为。只不过在Java中要显式实现,golang中是隐式实现的方法。这方面想必大家都有了解,网上的资料也很多,这里就不多说了,倒是要提提<strong>接口型函数</strong>这个概念。</p><p>接口型函数是指用函数实现接口,不过只适用于只有单个方法的接口。</p><p>首先是一段简单的代码,交代了接口的用途</p><pre><code>type Handler interface {    DoSomeThing(foo, bar interface{})}func Each(m map[interface{}]interface{}, h Handler) {if m != nil &amp;&amp; len(m) &gt; 0 {    for k, v := range m {        h.DoSomeThing(k, v)    }}} </code></pre><p>这边定义了一个接口,只有一个方法DoSomething,下边有个Each函数,接收2个参数,一个是任意Key,Value的映射（字典）,另一个就是实现了Handler接口的对象,函数的作用也很简单：DoSomething的调用,函数内的具体功能实现由我们定义。</p><p>下面的例子就简单定义了DoSomeThing,以及Each函数的调用。</p><pre><code>type welcome stringfunc (w welcome) DoSomeThing(k, v interface{}) {    fmt.Printf(&quot;%s,我叫%s,今年%d岁\n&quot;, w,k, v)}func main() {    persons := make(map[interface{}]interface{})    persons[&quot;张三&quot;] = 20    persons[&quot;李四&quot;] = 23    persons[&quot;王五&quot;] = 26    var w welcome = &quot;大家好&quot;    Each(persons, w)}</code></pre><p>字典中存放了人名和年龄,通过Each函数传入,并通过调用实现了Handler接口的welcome绑定的DoSomeThing方法打印出来结果。</p><p>以上实现也没什么大问题,只是有2个约束：</p><ol><li>必须要先将接口方法实现绑定到一个类型中,如上述例子中的先声明的type welcome string</li><li>DoSomeThing的定义名字不能修改,一旦修改接口实现便不成立。也无法根据实际情况灵活命名, 固定的一个方法名无法成功表意。</li></ol><p>关于第二个问题,我们可以这样做,定义一个函数,其类型与接口方法一致（参数，返回值都一致）。</p><pre><code>type HandlerFunc func(k, v interface{})func (f HandlerFunc) DoSomeThing(k, v interface{}){    f(k,v)}</code></pre><p>那么,最初的代码可以改为:</p><pre><code>type welcome stringtype HandlerFunc func(k, v interface{})func (f HandlerFunc) DoSomeThing(k, v interface{}){    f(k,v)}func (w welcome) selfInfo(k, v interface{}){ fmt.Printf(&quot;%s,我叫%s,今年%d岁\n&quot;, w,k, v)}func main() {    persons := make(map[interface{}]interface{})    persons[&quot;张三&quot;] = 20    persons[&quot;李四&quot;] = 23    persons[&quot;王五&quot;] = 26    var w welcome = &quot;大家好&quot;    Each(persons, HandlerFunc(w.selfInfo))}</code></pre><p>其中HandlerFunc(w.selfInfo),不是调用HandlerFunc这个方法,而是转化w.xxxxx函数为定义的HandlerFunc函数类型,相当于string（12）,而HandlerFunc又实现了Handler接口,符合Each的参数定义。w.xxxx里的xxxx可以随时修改为有意义的名字,并且的调用时展示出来。</p><p>接着解决第一个问题：</p><pre><code>func EachFunc(m map[interface{}]interface{}, f func(k, v interface{})) {    Each(m,HandlerFunc(f))}type welcome stringfunc (w welcome) selfInfo(k, v interface{}) {    fmt.Printf(&quot;%s,我叫%s,今年%d岁\n&quot;, w,k, v)}func main() {    persons := make(map[interface{}]interface{})    persons[&quot;张三&quot;] = 20    persons[&quot;李四&quot;] = 23    persons[&quot;王五&quot;] = 26    var w welcome = &quot;大家好&quot;    EachFunc(persons, w.selfInfo)}</code></pre><p>先是包装了下Each(persons, HandlerFunc(w.selfInfo)) 中的强制转换过程, 发现f参数是个函数类型, 那么便可以去掉type welcome string,进一步精简流程。</p><pre><code>func EachFunc(m map[interface{}]interface{}, f func(k, v interface{})) {    Each(m,HandlerFunc(f))}func selfInfo(k, v interface{}) {    fmt.Printf(&quot;%s,我叫%s,今年%d岁\n&quot;, w,k, v)}func main() {    persons := make(map[interface{}]interface{})    persons[&quot;张三&quot;] = 20    persons[&quot;李四&quot;] = 23    persons[&quot;王五&quot;] = 26    EachFunc(persons, selfInfo)}</code></pre><p>那么只需要定义好一个与接口方法相同的具体实现函数与type func 即可,不需要绑定到特定的对象,因为可以通过函数HandlerFunc强制转换过去。<br>下面是完整的代码</p><pre><code>type HandlerFunc func(k, v interface{})func (f HandlerFunc) DoSomeThing(k, v interface{}){    f(k,v)}func Each(m map[interface{}]interface{}, h Handler) {    if m != nil &amp;&amp; len(m) &gt; 0 {        for k, v := range m {            h.Do(k, v)        }    }}func EachFunc(m map[interface{}]interface{}, f func(k, v interface{})) {    Each(m,HandlerFunc(f))}func selfInfo(k, v interface{}) {    fmt.Printf(&quot;%s,我叫%s,今年%d岁\n&quot;, w,k, v)}func main() {    persons := make(map[interface{}]interface{})    persons[&quot;张三&quot;] = 20    persons[&quot;李四&quot;] = 23    persons[&quot;王五&quot;] = 26    EachFunc(persons, selfInfo)}</code></pre><p>此时只需关注selfInfo类函数的实现与命名即可,便可完成<br>EachFunc(persons, playGame) //玩游戏<br>EachFunc(persons, chat) //聊天</p><p>http.Handler源码中就有这种技巧的体现,Handle相当于Each, HandleFunc相当于EachFunc</p><pre><code>type Handler interface {    ServeHTTP(ResponseWriter, *Request)}func Handle(pattern string, handler Handler) {    DefaultServeMux.Handle(pattern, handler)}func HandleFunc(pattern string, handler func(ResponseWriter,*Request)){    DefaultServeMux.HandleFunc(pattern, handler)}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接触golang这门语言差不多有3个多月了。初上手时,光语法带给我的感觉和python很像,但又带点java的影子,接触了一段时间之后，逐渐发现这门语言的有趣之处,其中的面向接口编程算是较明显的一点。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>python字符串</title>
    <link href="http://yoursite.com/2018/04/20/python%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2018/04/20/python字符串/</id>
    <published>2018-04-20T06:03:36.000Z</published>
    <updated>2018-04-20T06:05:22.300Z</updated>
    
    <content type="html"><![CDATA[<p>1 Python 字符串的 CRUD 操作<br>1.1 创建字符串<br>字符串是 Python 中最常用的数据类型。我们可以使用引号(‘或”)来创建字符串，或使用三引号来创建字符串文本段落（允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符）。<br><a id="more"></a><br>创建字符串很简单，只要为变量分配一个值即可。例如：</p><p>str1 = ‘Hello World!’<br>str2 = “藕丝空间”<br>str3 = ‘’’<br>       藕丝空间，编程我们是认真的！<br>       你会编程吗？<br>       白日依山尽，<br>       黄河入河流，<br>       欲穷千里目，<br>       更上一层楼。<br>       ‘’’<br>print(str1, str2)<br>print(str3)<br>Hello World! 藕丝空间</p><pre><code>藕丝空间，编程我们是认真的！你会编程吗？白日依山尽，黄河入河流，欲穷千里目，更上一层楼。</code></pre><p>1.2 访问字符串中的值<br>Python 不支持单字符类型，单字符在 Python 中也是作为一个字符串使用。</p><p>Python 访问子字符串，可以使用方括号来截取字符串，如下实例：</p><p>str1 = ‘Hello World!’<br>str2 = “藕丝空间”<br>print(str1, str2)<br>print(‘str1[0]: ‘, str1[0])<br>print(‘str1[:-1]: ‘, str1[:-1])<br>print(‘str1[-6:-1]: ‘, str1[-6:-1])<br>print(‘str1[1:6:2]: ‘, str1[1:6:2])<br>print(‘str1[-1:-6:-2]: ‘, str1[-1:-6:-2])<br>print(‘str2[1:3]’, str2[1:3])<br>Hello World! 藕丝空间<br>str1[0]:  H<br>str1[:-1]:  Hello World<br>str1[-6:-1]:  World<br>str1[1:6:2]:  el<br>str1[-1:-6:-2]:  !lo<br>str2[1:3] 丝空<br>1.3 字符串更新<br>可以通过切片截取字符串的一部分并与其他字段拼接，如下实例：</p><p>str1 = ‘Hello World!’<br>str2 = “藕丝空间”</p><p>print (“已更新字符串 : “, str1[:6] + str2)<br>已更新字符串 :  Hello 藕丝空间<br>1.4 删除字符串<br>str1 = ‘Hello World!’<br>str2 = “藕丝空间”</p><p>del str1, str2</p><h1 id="print-str1"><a href="#print-str1" class="headerlink" title="print(str1)"></a>print(str1)</h1><h2 id="print-str2"><a href="#print-str2" class="headerlink" title="print(str2)"></a>print(str2)</h2><p>NameError                                 Traceback (most recent call last)</p><p> in ()<br>      4 del str1, str2<br>      5 # print(str1)<br>—-&gt; 6 print(str2)</p><p>NameError: name ‘str2’ is not defined<br>2 字符串运算符<br>2.1 +<br>字符串连接</p><p>str1 = ‘Hello ‘<br>str2 = “藕丝空间”<br>print(str1+str2)<br>Hello 藕丝空间<br>2.2 *<br>重复输出字符串</p><p>str2 = “藕丝空间”<br>print(str2<em>2)<br>print(str2</em>3)<br>藕丝空间藕丝空间<br>藕丝空间藕丝空间藕丝空间<br>2.3 [ ]<br>通过索引获取字符串中字符</p><p>以字符串 abcdef 为例。分别列出了使用正索引和负索引来定位字符的情况。</p><p>001.png</p><p>str1 = ‘Hello World!’<br>str2 = “藕丝空间”</p><p>print(‘str1[0]: ‘, str1[0])<br>print(‘str1[:-1]: ‘, str1[:-1])<br>print(‘str1[-6:-1]: ‘, str1[-6:-1])<br>print(‘str1[1:6:2]: ‘, str1[1:6:2])<br>print(‘str1[-1:-6:-2]: ‘, str1[-1:-6:-2])<br>print(‘str2[1:3]’, str2[1:3])<br>str1[0]:  H<br>str1[:-1]:  Hello World<br>str1[-6:-1]:  World<br>str1[1:6:2]:  el<br>str1[-1:-6:-2]:  !lo<br>str2[1:3] 丝空<br>2.4 in、not in<br>in 成员运算符 - 如果字符串中包含给定的字符返回 True。<br>not in 成员运算符 - 如果字符串中不包含给定的字符返回 True。<br>str1 = ‘Hello World!’<br>str2 = “藕丝空间”</p><p>print(‘Hello’ in str1)<br>print(‘Hello’ in str2)<br>print(‘Hello’ not in str1)<br>print(‘Hello’ not in str2)<br>True<br>False<br>False<br>True<br>2.5 r/R<br>原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 r（可以大小写）以外，与普通字符串有着几乎完全相同的语法。</p><p>print(‘\n’)<br>print(r’\n’)<br>print(‘\t’)<br>print(R’\t’)<br>\n</p><p>\t<br>Python转义字符<br>在需要在字符中使用特殊字符时，python用反斜杠()转义字符。如下表：</p><p>转义字符    描述<br>(在行尾时)    续行符<br>\    反斜杠符号<br>\’    单引号<br>“    双引号<br>\a    响铃<br>\b    退格(Backspace)<br>\e    转义<br>\000    空<br>\n    换行<br>\v    纵向制表符<br>\t    横向制表符<br>\r    回车<br>\f    换页<br>\oyy    八进制数，yy代表的字符，例如：\o12代表换行<br>\xyy    十六进制数，yy代表的字符，例如：\x0a代表换行<br>\other    其它的字符以普通格式输出<br>3 格式化字符串<br>3.1 使用字符串格式符 %s<br>Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。</p><p>在 Python 中，字符串格式化使用与 C 中 sprintf 函数一样的语法。</p><p>3.1.1 使用 %s 或 %r 格式化字符串<br>%s 字符串 (采用str()的显示)<br>%r 字符串 (采用repr()的显示)<br>print(“I’m %s. I’m %d year old” % (‘Tom’, 30))<br>print(“I’m %r. I’m %d year old” % (ord(‘H’), 30))<br>print(“I’m %s. I’m %d year old” % (chr(ord(‘H’)), 30))<br>print(“repr() 显示引号: %r; str() 不显示: %s” % (‘test1’, ‘test2’))<br>I’m Tom. I’m 30 year old<br>I’m 72. I’m 30 year old<br>I’m H. I’m 30 year old<br>repr() 显示引号: ‘test1’; str() 不显示: test2<br>3.1.2 使用 %c 格式化单个字符及其ASCII码<br>print(“I’m %c. I’m %d year old” % (ord(‘H’), 30))<br>print(“I’m %c. I’m %d year old” % (ord(‘t’), 30))<br>print(“ord(‘t’) 的值是 “, ord(‘t’))<br>I’m H. I’m 30 year old<br>I’m t. I’m 30 year old<br>ord(‘t’) 的值是  116<br>3.1.3 其它格式<br>%b 二进制整数，这种格式不支持使用 % 来格式化字符串<br>%d 十进制整数<br>%i 十进制整数<br>%o 八进制整数<br>%x 十六进制整数<br>%e 指数 (基底写为e)<br>%E 指数 (基底写为E)<br>%f 浮点数<br>%F 浮点数，与上相同<br>%g 指数(e)或浮点数 (根据显示长度)<br>%G 指数(E)或浮点数 (根据显示长度)<br>print(“I’m %s. I’m %d year old” % (‘十进制’, 30))<br>print(“I’m %s. I’m %i year old” % (‘十进制’, 30))<br>print(“I’m %s. I’m %o year old” % (‘八进制’, 30))<br>print(“I’m %s. I’m %x year old” % (‘十六进制’, 30))<br>print(“I’m %s. I’m %e year old” % (‘指数’, 30))<br>print(“I’m %s. I’m %E year old” % (‘指数’, 30))<br>print(“I’m %s. I’m %f year old” % (‘浮点数’, 30))<br>print(“I’m %s. I’m %f year old” % (‘浮点数’, 30))<br>print(“I’m %s. I’m %F year old” % (‘浮点数’, 30))<br>print(“I’m %s. I’m %g year old” % (‘Tom’, 30.00000))<br>print(“I’m %s. I’m %G year old” % (‘Tom’, 30.00000))<br>print(“I’m %s. I’m %g year old” % (‘Tom’, 3.000000E+01))<br>print(“I’m %s. I’m %G year old” % (‘Tom’, 3.000000e+01))<br>I’m 十进制. I’m 30 year old<br>I’m 十进制. I’m 30 year old<br>I’m 八进制. I’m 36 year old<br>I’m 十六进制. I’m 1e year old<br>I’m 指数. I’m 3.000000e+01 year old<br>I’m 指数. I’m 3.000000E+01 year old<br>I’m 浮点数. I’m 30.000000 year old<br>I’m 浮点数. I’m 30.000000 year old<br>I’m Tom. I’m 30 year old<br>I’m Tom. I’m 30 year old<br>I’m Tom. I’m 30 year old<br>I’m Tom. I’m 30 year old<br>3.1.4 更复杂的控制<br>%[(name)][flags][width].[precision] - (name): 命名,用于字典控制赋值 - flags: 可以有+,-。+表示右对齐（默认）。-表示左对齐。’ ‘为一个空格，用来填充字符。0表示使用0填充数字。 - width: 显示宽度,总长度,会补齐空格. - precision: 表示小数点后精度.</p><p>使用字典来赋值</p><p>print(“I’m %(name)s. I’m %(age)d year old” % {‘name’: ‘十进制’, ‘age’: 30})<br>I’m 十进制. I’m 30 year old<br>对齐及填充</p><p>print(“I’m %6s. I’m %06d year old” % (‘整数’, 30)) # 字符串默认右对齐，数字显示 6 位，位数不够，用 0 补齐。<br>print(“I’m %-10s. I’m %.10f year old” % (‘浮点数’, 30))# 字符串左对齐，浮点数显示 10 位小数<br>print(“I’m %-10s. I’m %10.2f year old” % (‘浮点数’, 30))# 字符串左对齐，浮点数显示  2 位小数，默认右对齐。<br>print(“I’m %-10s. I’m %10.10f year old” % (‘浮点数’, 30))# 字符串左对齐，浮点数显示 10 位小数，小数点精度可以突破显示宽度限制。<br>I’m     整数. I’m 000030 year old<br>I’m 浮点数       . I’m 30.0000000000 year old<br>I’m 浮点数       . I’m      30.00 year old<br>I’m 浮点数       . I’m 30.0000000000 year old<br>3.2 使用格式化字符串的函数 str.format()<br>Python2.6 开始，新增了一种格式化字符串的函数 str.format()，它增强了字符串格式化的功能。</p><p>基本语法是通过 {} 和 : 来代替以前的 % 。</p><p>3.2.1 按位置访问参数<br>print(‘{}, {}, {}’.format(‘a’, ‘b’, ‘c’)) # 默认从左到右顺序，按位置赋值，占位符要和元组的长度一致<br>print(‘{0}, {1}, {2}’.format(‘a’, ‘b’, ‘c’))<br>print(‘{2}, {1}, {0}’.format(‘a’, ‘b’, ‘c’))<br>print(‘{2}, {1}, {0}’.format(<em>‘abc’) ) # 通过 </em> 进行解包<br>print(‘{0}{1}{0}’.format(‘藕丝’, ‘cad’)) # 位置参数可重复<br>a, b, c<br>a, b, c<br>c, b, a<br>c, b, a<br>藕丝cad藕丝<br>3.2.2 按名称访问参数<br>print(‘坐标: {latitude}, {longitude}’.format(latitude=’37.24N’, longitude=’-115.81W’)) # latitude 纬度， longitude 经度</p><p>coord = {‘latitude’: ‘37.24N’, ‘longitude’: ‘-115.81W’}<br>print(‘坐标: {latitude}, {longitude}’.format(<strong>coord)) # </strong> 表示是字典变量<br>坐标: 37.24N, -115.81W<br>坐标: 37.24N, -115.81W<br>3.2.3 访问参数的属性<br>c = 3-5j   # Python 中一切皆对象，复数具有“real（实部）”和“imag（虚部）”两个属性。<br>(‘The complex number {0} is formed from the real part {0.real} ‘<br> ‘and the imaginary part {0.imag}.’).format(c)<br>‘The complex number (3-5j) is formed from the real part 3.0 and the imaginary part -5.0.’<br>3.2.4 按索引访问参数<br>coord = (3, 5)<br>‘X: {0[0]};  Y: {0[1]}’.format(coord)<br>‘X: 3;  Y: 5’<br>3.2.5 替代 %s 和 %r<br>“repr() shows quotes: {!r}; str() doesn’t: {!s}”.format(‘test1’, ‘test2’)<br>“repr() shows quotes: ‘test1’; str() doesn’t: test2”<br>3.2.6 对齐文本并指定宽度<br>‘{:&lt;30}’.format(‘左对齐’)<br>‘左对齐                           ‘<br>‘{:&gt;30}’.format(‘右对齐’)<br>‘                           右对齐’<br>‘{:^30}’.format(‘居中’)<br>‘              居中              ‘<br>‘{:<em>^30}’.format(‘居中’) # 使用 </em> 填充<br>‘<strong><strong><strong>**</strong></strong></strong>居中<strong><strong><strong>**</strong></strong></strong>‘<br>3.2.7 替换％+ f，％-f和％f<br>‘{:+f}; {:+f}’.format(3.14, -3.14) # 带符号<br>‘+3.140000; -3.140000’<br>‘{: f}; {: f}’.format(3.14, -3.14) # 不显示正号，但保留一个空格位置<br>‘ 3.140000; -3.140000’<br>‘{:-f}; {:-f}’.format(3.14, -3.14) # 与 ‘{:f}; {:f}’ 作用相同<br>‘3.140000; -3.140000’<br>‘{:10f}; {:2f}’.format(3.14, -3.14) #  设置字符串的总宽度，如果当前宽度大于设置的总宽度，则显示当前宽度。<br>‘  3.140000; -3.140000’<br>‘{:10.1f}; {:.3f}’.format(3.14, -3.14) # 设置小数点的宽度<br>‘       3.1; -3.140’<br>3.2.8 替换％x和％o<br>“int: {0:d};  hex: {0:x};  oct: {0:o};  bin: {0:b}”.format(42) # 比使用 % 格式化的方式多了处理二进制的符号<br>‘int: 42;  hex: 2a;  oct: 52;  bin: 101010’<br>“int: {0:d};  hex: {0:#x};  oct: {0:#o};  bin: {0:#b}”.format(42) # 显示十六进制，八进制，二进制的字首<br>‘int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010’<br>3.2.9 使用逗号作为千位分隔符<br>‘{:,}’.format(1234567890)<br>‘1,234,567,890’<br>3.2.10 显示百分比<br>points = 19<br>total = 22<br>‘Correct answers: {:.2%}’.format(points/total)<br>‘Correct answers: 86.36%’<br>3.2.11 使用特定类型格式<br>import datetime<br>d = datetime.datetime(2018, 7, 4, 12, 15, 58)<br>‘{:%Y-%m-%d %H:%M:%S}’.format(d)<br>‘2018-07-04 12:15:58’<br>3.2.12 嵌套参数和更复杂的例子<br>print(list(zip(‘&lt;^&gt;’, [‘left’, ‘center’, ‘right’])))<br>for align, text in zip(‘&lt;^&gt;’, [‘left’, ‘center’, ‘right’]):<br>    print(‘{0:{fill}{align}16}’.format(text, fill=align, align=align))    # {0} 中的 0 可有可无<br>[(‘&lt;’, ‘left’), (‘^’, ‘center’), (‘&gt;’, ‘right’)]<br>left&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br>^^^^^center^^^^^</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>right<br>octets = [192, 168, 0, 1]<br>‘{:02X}{:02X}{:02X}{:02X}’.format(*octets) # 按照十六进制的方式显示。<br>‘C0A80001’<br>‘{:02X}’.format(192)<br>‘C0’<br>int(_, 16)<br>192<br>width = 5<br>for num in range(5,12):<br>    for base in ‘dXob’:  # 用于显示 5-11 的数字的十进制，十六进制，八进制和二进制。<br>        print(‘{0:{width}{base}}’.format(num, base=base, width=width), end=’ ‘)<br>    print()<br>5     5     5   101<br>    6     6     6   110<br>    7     7     7   111<br>    8     8    10  1000<br>    9     9    11  1001<br>   10     A    12  1010<br>   11     B    13  1011<br>4 字符串模板<br>class string.Template(template):<br>   ‘’’参数为字符串对象模板’’’<br>   substitute(mapping, <strong>kwds):<br>     ‘’’执行模板替换，返回一个新的字符串。映射是类似字典的对象，其键与模板中的占位符相匹配。’’’<br>   safe_substitute(mapping, </strong>kwds):<br>     ‘’’与 substitute() 功能类似，但会对占位符中的 $ 进行过滤，显示原始符号。’’’<br>from string import Template<br>s = Template(‘$who likes $what’)<br>s.substitute(who=’Tom’, what=’jerry’)<br>‘Tom likes jerry’<br>d = dict(who=’Tom’)<br>print(d)<br>Template(‘Give $who $100’).substitute(d) # 字符串模板中带有无效的 $ 占位符<br>{‘who’: ‘Tom’}</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><hr><p>ValueError                                Traceback (most recent call last)</p><p> in ()<br>      1 d = dict(who=’Tom’)<br>      2 print(d)<br>—-&gt; 3 Template(‘Give $who $100’).substitute(d)</p><p>/usr/lib/python3.6/string.py in substitute(<em>args, **kws)<br>    124             raise ValueError(‘Unrecognized named group in pattern’,<br>    125                              self.pattern)<br>–&gt; 126         return self.pattern.sub(convert, self.template)<br>    127<br>    128     def safe_substitute(</em>args, **kws):</p><p>/usr/lib/python3.6/string.py in convert(mo)<br>    121                 return self.delimiter<br>    122             if mo.group(‘invalid’) is not None:<br>–&gt; 123                 self._invalid(mo)<br>    124             raise ValueError(‘Unrecognized named group in pattern’,<br>    125                              self.pattern)</p><p>/usr/lib/python3.6/string.py in _invalid(self, mo)<br>     97             lineno = len(lines)<br>     98         raise ValueError(‘Invalid placeholder in string: line %d, col %d’ %<br>—&gt; 99                          (lineno, colno))<br>    100<br>    101     def substitute(*args, **kws):</p><p>ValueError: Invalid placeholder in string: line 1, col 11</p><h2 id="Template-‘-who-likes-what’-substitute-d-缺少-key-键值-what。"><a href="#Template-‘-who-likes-what’-substitute-d-缺少-key-键值-what。" class="headerlink" title="Template(‘$who likes $what’).substitute(d) # 缺少 key 键值 what。"></a>Template(‘$who likes $what’).substitute(d) # 缺少 key 键值 what。</h2><p>KeyError                                  Traceback (most recent call last)</p><p> in ()<br>—-&gt; 1 Template(‘$who likes $what’).substitute(d)</p><p>/usr/lib/python3.6/string.py in substitute(<em>args, **kws)<br>    124             raise ValueError(‘Unrecognized named group in pattern’,<br>    125                              self.pattern)<br>–&gt; 126         return self.pattern.sub(convert, self.template)<br>    127<br>    128     def safe_substitute(</em>args, **kws):</p><p>/usr/lib/python3.6/string.py in convert(mo)<br>    117             named = mo.group(‘named’) or mo.group(‘braced’)<br>    118             if named is not None:<br>–&gt; 119                 return str(mapping[named])<br>    120             if mo.group(‘escaped’) is not None:<br>    121                 return self.delimiter</p><p>KeyError: ‘what’<br>Template(‘$who likes $what’).safe_substitute(d)<br>‘Tom likes $what’<br>Template(‘Give $who $100’).safe_substitute(d)<br>‘Give Tom $100’<br>5 字符串函数<br>5.1 capitalize()<br>参数</p><p>无。<br>返回值</p><p>该方法返回一个首字母大写的字符串。<br>str1 = “this is string example from <a href="http://www.os373.cn" target="_blank" rel="noopener">http://www.os373.cn</a> ……wow!!!”  # 请避免使用关键字 str 做变量名</p><p>print (“str.capitalize() : “, str1.capitalize())</p><p>str2 = “藕丝空间”</p><p>print (“str.capitalize() : “, str2.capitalize()) # 针对英文书写格式。<br>str.capitalize() :  This is string example from <a href="http://www.os373.cn" target="_blank" rel="noopener">http://www.os373.cn</a> ……wow!!!<br>str.capitalize() :  藕丝空间<br>5.2 count(str, beg= 0,end=len(string))<br>参数</p><p>sub – 搜索的子字符串<br>start – 字符串开始搜索的位置。默认为第一个字符,第一个字符索引值为0。<br>end – 字符串中结束搜索的位置。字符中第一个字符的索引为 0。默认为字符串的最后一个位置。<br>返回值</p><p>该方法返回子字符串在字符串中出现的次数。<br>str1=”<a href="http://www.os373.cn&quot;" target="_blank" rel="noopener">http://www.os373.cn&quot;</a><br>sub=’o’<br>print (“str.count(‘o’) : “, str1.count(sub))</p><p>sub=’os’<br>print (“str.count(‘run’, 0, 10) : “, str1.count(sub,0,10))<br>str.count(‘o’) :  1<br>str.count(‘run’, 0, 10) :  0<br>5.3 encode(encoding=”utf-8”, errors=”strict”)<br>参数</p><p>encoding – 要使用的编码，如: UTF-8。<br>errors – 设置不同错误的处理方案。默认为 ‘strict’,意为编码错误引起一个UnicodeError。 其他可能得值有 ‘ignore’, ‘replace’, ‘xmlcharrefreplace’, ‘backslashreplace’ 以及通过 codecs.register_error() 注册的任何值。<br>返回值</p><p>该方法返回编码后的字符串，它是一个 bytes 对象。<br>str1 = “藕丝空间”;<br>str_utf8 = str1.encode(“UTF-8”)<br>str_gbk = str1.encode(“GBK”)</p><p>print(str1)</p><p>print(“UTF-8 编码：”, str_utf8)<br>print(“GBK 编码：”, str_gbk)</p><p>print(“UTF-8 解码：”, str_utf8.decode(‘UTF-8’,’strict’))<br>print(“GBK 解码：”, str_gbk.decode(‘GBK’,’strict’))<br>藕丝空间<br>UTF-8 编码： b’\xe8\x97\x95\xe4\xb8\x9d\xe7\xa9\xba\xe9\x97\xb4’<br>GBK 编码： b’\xc5\xba\xcb\xbf\xbf\xd5\xbc\xe4’<br>UTF-8 解码： 藕丝空间<br>GBK 解码： 藕丝空间<br>5.4 bytes.decode(encoding=”utf-8”, errors=”strict”)<br>decode() 方法以指定的编码格式解码 bytes 对象。默认编码为 ‘utf-8’。</p><p>参数</p><p>encoding – 要使用的编码，如”UTF-8”。<br>errors – 设置不同错误的处理方案。默认为 ‘strict’,意为编码错误引起一个UnicodeError。 其他可能得值有 ‘ignore’, ‘replace’, ‘xmlcharrefreplace’, ‘backslashreplace’ 以及通过 codecs.register_error() 注册的任何值。<br>返回值</p><p>该方法返回解码后的字符串。<br>str1 = “藕丝空间”;<br>str_utf8 = str1.encode(“UTF-8”)<br>str_gbk = str1.encode(“GBK”)</p><p>print(str1)</p><p>print(“UTF-8 编码：”, str_utf8)<br>print(“GBK 编码：”, str_gbk)</p><p>print(“UTF-8 解码：”, str_utf8.decode(‘UTF-8’,’strict’))<br>print(“GBK 解码：”, str_gbk.decode(‘GBK’,’strict’))<br>藕丝空间<br>UTF-8 编码： b’\xe8\x97\x95\xe4\xb8\x9d\xe7\xa9\xba\xe9\x97\xb4’<br>GBK 编码： b’\xc5\xba\xcb\xbf\xbf\xd5\xbc\xe4’<br>UTF-8 解码： 藕丝空间<br>GBK 解码： 藕丝空间<br>5.5 endswith(suffix, beg=0, end=len(string))<br>参数</p><p>suffix – 该参数可以是一个字符串或者是一个元素。<br>beg – 字符串中的开始位置。<br>end – 字符中结束位置。<br>返回值</p><p>如果字符串含有指定的后缀返回True，否则返回False。<br>str1=’ousi example….wow!!!’<br>suffix=’!!’<br>print (str1.endswith(suffix))<br>print (str1.endswith(suffix,20)) # 从索引 20 的位置开始<br>suffix1=’wow’<br>print (str1.endswith(suffix1))<br>print (str1.endswith(suffix1, 0, 19))<br>True<br>True<br>False<br>True</p><ol><li>6 startswith(prefix, beg=0,end=len(string))<br>参数</li></ol><p>prefix – 检测的字符串。<br>beg – 可选参数用于设置字符串检测的起始位置。<br>end – 可选参数用于设置字符串检测的结束位置。<br>返回值</p><p>如果检测到字符串则返回True，否则返回False。<br>str1=’ousi example….wow!!!’<br>prefix=’ousi’<br>print (str1.startswith(prefix))<br>print (str1.startswith(prefix,20)) # 从索引 20 的位置开始<br>prefix1=’exam’<br>print (str1.startswith(prefix1))<br>print (str1.startswith(prefix1, 5, 19))<br>True<br>False<br>False<br>True<br>5.7 expandtabs(tabsize=8)<br>参数</p><p>tabsize – 指定转换字符串中的 tab 符号(‘\t’)转为空格的字符数。<br>返回值</p><p>该方法返回字符串中的 tab 符号(‘\t’)转为空格后生成的新字符串。<br>str1 = “this is\tstring example….wow!!!”</p><p>print (“原始字符串: “ + str1)<br>print (“替换 \t 符号: “ +  str1.expandtabs())<br>print (“使用16个空格替换 \t 符号: “ +  str1.expandtabs(16))<br>原始字符串: this is  string example….wow!!!<br>替换 \t 符号: this is string example….wow!!!<br>使用16个空格替换 \t 符号: this is         string example….wow!!!<br>5.8 maketrans(intab, outtab)<br>用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</p><p>两个字符串的长度必须相同，为一一对应的关系。</p><p>注：Python3.4已经没有 string.maketrans() 了，取而代之的是内建函数: bytearray.maketrans()、bytes.maketrans()、str.maketrans()</p><p>参数</p><p>intab – 字符串中要替代的字符组成的字符串。<br>outtab – 相应的映射字符的字符串。<br>返回值</p><p>返回字符串转换后生成的新字符串。<br>intab = “aeiou”<br>outtab = “12345”<br>trantab = str.maketrans(intab, outtab) # 任何一个<strong>已存在</strong>的字符串都可以触发 maketrans命令</p><p>str1 = “this is string example….wow!!!”<br>print (str1.translate(trantab))<br>th3s 3s str3ng 2x1mpl2….w4w!!!<br>5.9 translate()<br>translate()方法语法：</p><p>str.translate(table)<br>bytes.translate(table[, delete])<br>bytearray.translate(table[, delete])<br>参数</p><p>table – 翻译表，翻译表是通过 maketrans() 方法转换而来。<br>deletechars – 字符串中要过滤的字符列表。<br>返回值</p><p>返回翻译后的字符串,若给出了 delete 参数，则将原来的bytes中的属于delete的字符删除，剩下的字符 要按照table中给出的映射来进行映射 。<br>intab = “aeiou”<br>outtab = “12345”<br>trantab = str.maketrans(intab, outtab) # 任何一个<strong>已存在</strong>的字符串都可以触发 maketrans命令</p><p>str1 = “this is string example….wow!!!”<br>print (str1.translate(trantab))</p><h1 id="———–"><a href="#———–" class="headerlink" title="———–"></a>———–</h1><p>intab = “aeiou”.encode(“UTF-8”)<br>outtab = “12345”.encode(“UTF-8”)<br>trantab = bytes.maketrans(intab, outtab)</p><p>str2 = “this is string example….wow!!!”;<br>str_utf8 = str2.encode(“UTF-8”)<br>print (str_utf8.translate(trantab, ‘wow’.encode(“UTF-8”)))<br>th3s 3s str3ng 2x1mpl2….w4w!!!<br>b’th3s 3s str3ng 2x1mpl2….!!!’<br>5.10 isalnum()<br>参数</p><p>无。<br>返回值</p><p>如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False<br>str1 = “” # 没有字符<br>print(str1.isalnum())</p><p>str2 = “os373藕丝”  # 字符串没有空格<br>print (str2.isalnum())</p><p>str3 = “<a href="http://www.os373.cn" target="_blank" rel="noopener">www.os373.cn</a> “ # 存在 . 和空格<br>print (str3.isalnum())<br>False<br>True<br>False<br>5.11 isalpha()<br>参数</p><p>无。<br>返回值</p><p>如果字符串至少有一个字符并且所有字符都是字母则返回 True,否则返回 False<br>str1 = “ousi”<br>print (str1.isalpha())</p><p>str2 = “os373!”<br>print (str2.isalpha())<br>True<br>False<br>5.12 isdecimal()<br>isdecimal() 方法检查字符串是否只包含十进制字符。这种方法只存在于 unicode 对象（其它拉丁语言）。</p><p>注意:定义一个十进制字符串，只需要在字符串前添加 ‘u’ 前缀即可。</p><p>参数</p><p>无<br>返回值</p><p>如果字符串是否只包含十进制字符返回True，否则返回False。<br>str1 = “os373”<br>print (str1.isdecimal())</p><p>str2 = “23443434”<br>print (str2.isdecimal())<br>False<br>True<br>5.13 isnumeric()<br>isnumeric() 方法检测字符串是否只由数字组成。这种方法是只针对 unicode 对象（其它拉丁语言）。</p><p>参数</p><p>无。<br>返回值</p><p>如果字符串中只包含数字字符，则返回 True，否则返回 False<br>str1 = “os373”<br>print (str1.isnumeric())</p><p>str2 = “23443434”<br>print (str2.isnumeric())<br>False<br>True<br>5.14 isdigit()<br>参数</p><p>无。<br>返回值</p><p>如果字符串只包含数字则返回 True 否则返回 False。<br>str1 = “01001”;<br>print (str1.isdigit())</p><p>str2 = “os373!!!”<br>print (str2.isdigit())<br>True<br>False<br>5.15 islower()<br>参数</p><p>无。<br>返回值</p><p>如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False<br>str1 = “os373.cn!!!”<br>print (str1.islower())</p><p>str2 = “<a href="http://www.os373.cn\t!!!&quot;" target="_blank" rel="noopener">http://www.os373.cn\t!!!&quot;</a><br>print (str2.islower())</p><p>str3 = “<a href="http://www.藕丝空间.cn!!!&quot;" target="_blank" rel="noopener">http://www.藕丝空间.cn!!!&quot;</a><br>print (str3.islower())</p><p>str4 = “<a href="http://www.OS373.cn!!!&quot;" target="_blank" rel="noopener">http://www.OS373.cn!!!&quot;</a><br>print (str4.islower())<br>True<br>True<br>True<br>False<br>5.16 lower()<br>参数</p><p>无。<br>返回值</p><p>返回将字符串中所有大写字符转换为小写后生成的字符串。<br>str1 = “OS373.CN!!!”<br>print (str1.lower())</p><p>str2 = “<a href="http://WWW.os373.cn\t!!!&quot;" target="_blank" rel="noopener">http://WWW.os373.cn\t!!!&quot;</a><br>print (str2.lower())</p><p>str3 = “<a href="http://WWW.藕丝空间.CN!!!&quot;" target="_blank" rel="noopener">http://WWW.藕丝空间.CN!!!&quot;</a><br>print (str3.lower())</p><p>str4 = “<a href="http://WWW.OS373.cn!!!&quot;" target="_blank" rel="noopener">http://WWW.OS373.cn!!!&quot;</a><br>print (str4.lower())<br>os373.cn!!!<br><a href="http://www.os373.cn" target="_blank" rel="noopener">http://www.os373.cn</a> !!!<br><a href="http://www.藕丝空间.cn!!" target="_blank" rel="noopener">http://www.藕丝空间.cn!!</a>!<br><a href="http://www.os373.cn!!" target="_blank" rel="noopener">http://www.os373.cn!!</a>!<br>5.17 casefold()<br>lower() 只对 ASCII 也就是 ‘A-Z’有效，但是其它一些语言里面存在小写的情况就没办法了。文档里面举得例子是德语中’ß’的小写是’ss’（这个我也不懂）：</p><p>s = ‘ß’<br>s.lower() #  ‘ß’<br>s.casefold() # ‘ss’<br>5.18 isupper()<br>参数</p><p>无。<br>返回值</p><p>如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False<br>str1 = “OS373.CN!!!”<br>print (str1.isupper())</p><p>str2 = “<a href="http://WWW.os373.cn\t!!!&quot;" target="_blank" rel="noopener">http://WWW.os373.cn\t!!!&quot;</a><br>print (str2.isupper())</p><p>str3 = “<a href="http://WWW.藕丝空间.CN!!!&quot;" target="_blank" rel="noopener">http://WWW.藕丝空间.CN!!!&quot;</a><br>print (str3.isupper())</p><p>str4 = “<a href="http://WWW.OS373.cn!!!&quot;" target="_blank" rel="noopener">http://WWW.OS373.cn!!!&quot;</a><br>print (str4.isupper())<br>True<br>False<br>False<br>False<br>5.19 upper()<br>参数</p><p>无。<br>返回值</p><p>返回小写字母转为大写字母的字符串。<br>str1 = “OS373.CN!!!”<br>print (str1.upper())</p><p>str2 = “<a href="http://WWW.os373.cn\t!!!&quot;" target="_blank" rel="noopener">http://WWW.os373.cn\t!!!&quot;</a><br>print (str2.upper())</p><p>str3 = “<a href="http://WWW.藕丝空间.CN!!!&quot;" target="_blank" rel="noopener">http://WWW.藕丝空间.CN!!!&quot;</a><br>print (str3.upper())</p><p>str4 = “<a href="http://WWW.OS373.cn!!!&quot;" target="_blank" rel="noopener">http://WWW.OS373.cn!!!&quot;</a><br>print (str4.upper())<br>OS373.CN!!!<br>HTTP://WWW.OS373.CN !!!<br>HTTP://WWW.藕丝空间.CN!!!<br>HTTP://WWW.OS373.CN!!!<br>5.20 swapcase()<br>用于对字符串的大小写字母进行转换。</p><p>参数</p><p>无。<br>返回值</p><p>返回大小写字母转换后生成的新字符串。<br>str1 = “OS373.CN!!!”<br>print (str1.swapcase())</p><p>str2 = “<a href="http://WWW.os373.cn\t!!!&quot;" target="_blank" rel="noopener">http://WWW.os373.cn\t!!!&quot;</a><br>print (str2.swapcase())</p><p>str3 = “<a href="http://WWW.藕丝空间.CN!!!&quot;" target="_blank" rel="noopener">http://WWW.藕丝空间.CN!!!&quot;</a><br>print (str3.swapcase())</p><p>str4 = “<a href="http://WWW.OS373.cn!!!&quot;" target="_blank" rel="noopener">http://WWW.OS373.cn!!!&quot;</a><br>print (str4.swapcase())<br>os373.cn!!!<br>HTTP://<a href="http://www.OS373.CN" target="_blank" rel="noopener">www.OS373.CN</a> !!!<br>HTTP://www.藕丝空间.cn!!!<br>HTTP://<a href="http://www.os373.CN!!" target="_blank" rel="noopener">www.os373.CN!!</a>!<br>5.21 isspace()<br>参数</p><p>无。<br>返回值</p><p>如果字符串中只包含空格，则返回 True，否则返回 False.<br>str1 = “       “<br>print (str1.isspace())</p><p>str2 = “藕丝空间     “<br>print (str2.isspace())<br>True<br>False<br>5.22　istitle()<br>检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写。</p><p>参数</p><p>无。<br>返回值</p><p>如果字符串中所有的单词拼写首字母为大写，且其他字母为小写则返回 True，否则返回 False.<br>str1 = “This Is String Example…Wow!!!”<br>print (str1.istitle())</p><p>str2 = “This is string example….wow!!!”<br>print (str2.istitle())<br>True<br>False<br>5.23 title()<br>参数</p><p>无。<br>返回值</p><p>返回”标题化”的字符串,就是说所有单词都是以大写开始，其它单词为小写。<br>str1 = “This IS StRING Example…Wow!!!”<br>print (str1.title())</p><p>str2 = “This is string example….藕丝空间，wow!!!”<br>print (str2.title())<br>This Is String Example…Wow!!!<br>This Is String Example….藕丝空间，Wow!!!<br>5.24 join(seq)<br>参数</p><p>sequence – 要连接的元素序列。<br>返回值</p><p>返回通过指定字符连接序列中元素后生成的新字符串。<br>s1 = “-“<br>s2 = “”<br>s3 = “ “<br>seq = tuple(“os373.cn”) # 字符串序列<br>print (s1.join( seq ))<br>print (s2.join( seq ))<br>print (s3.join( seq ))<br>o-s-3-7-3-.-c-n<br>os373.cn<br>o s 3 7 3 . c n<br>5.25 center(width[, fillchar])<br>参数</p><p>width – 字符串的总宽度。<br>fillchar – 填充字符。<br>返回值</p><p>返回一个指定的宽度 width 且居中的字符串，如果 width 小于字符串宽度直接返回字符串，否则使用 fillchar 去填充。<br>str1 = “<a href="http://www.os373.cn&quot;" target="_blank" rel="noopener">http://www.os373.cn&quot;</a></p><p>print (“str.center(40, ‘<em>‘) : “, str1.center(40, ‘</em>‘))<br>print (“str.center(10, ‘$’) : “, str1.center(10, ‘<em>‘))<br>str.center(40, ‘</em>‘) :  <strong><strong>**</strong></strong><a href="http://www.os373.cn**********" target="_blank" rel="noopener">http://www.os373.cn**********</a>*<br>str.center(10, ‘$’) :  <a href="http://www.os373.cn" target="_blank" rel="noopener">http://www.os373.cn</a><br>5.26 ljust(width[, fillchar])<br>参数</p><p>width – 指定字符串长度。<br>fillchar – 填充字符，默认为空格。<br>返回值</p><p>返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。<br>str1 = “<a href="http://www.os373.cn!!!&quot;" target="_blank" rel="noopener">http://www.os373.cn!!!&quot;</a></p><p>print (str1.ljust(50, ‘*’))<br><a href="http://www.os373.cn!!!***************************" target="_blank" rel="noopener">http://www.os373.cn!!!***************************</a>*<br>5.27 rjust(width,[, fillchar])<br>参数</p><p>width – 指定填充指定字符后中字符串的总长度.<br>fillchar – 填充的字符，默认为空格。<br>返回值</p><p>返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串。如果指定的长度小于字符串的长度则返回原字符串.<br>str = “<a href="http://www.os373.cn!!!&quot;" target="_blank" rel="noopener">http://www.os373.cn!!!&quot;</a></p><p>print (str.rjust(50, ‘*’))<br><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong><a href="http://www.os373.cn!!" target="_blank" rel="noopener">http://www.os373.cn!!</a>!<br>5.28 zfill(width)<br>参数</p><p>width – 指定字符串的长度。原字符串右对齐，前面填充 0。<br>返回值</p><p>返回指定长度的字符串。<br>str = “<a href="http://www.os373.cn!!!&quot;" target="_blank" rel="noopener">http://www.os373.cn!!!&quot;</a></p><p>print (str.zfill(50))<br>0000000000000000000000000000<a href="http://www.os373.cn!!" target="_blank" rel="noopener">http://www.os373.cn!!</a>!<br>5.29 find(str, beg=0 end=len(string))<br>参数</p><p>str – 指定检索的字符串<br>beg – 开始索引，默认为0。<br>end – 结束索引，默认为字符串的长度。<br>返回值</p><p>如果包含子字符串，返回开始的索引值，否则返回-1。<br>str1 = “os373 example….wow!!!”<br>str2 = “exam”;</p><p>print (str1.find(str2))<br>print (str1.find(str2, 5))<br>print (str1.find(str2, 10))<br>6<br>6<br>-1<br>5.30 rfind(str, beg=0 end=len(string))<br>参数</p><p>str – 查找的字符串<br>beg – 开始查找的位置，默认为0<br>end – 结束查找位置，默认为字符串的长度。<br>返回值</p><p>返回字符串最后一次出现的位置，如果没有匹配项则返回-1。<br>str1 = “os373 example…. example wow!!!”<br>str2 = “exam”;</p><p>print (str1.rfind(str2))<br>print (str1.rfind(str2, 5))<br>print (str1.rfind(str2, 20))<br>18<br>18<br>-1<br>5.31 index(str, beg=0, end=len(string))<br>参数</p><p>str – 指定检索的字符串<br>beg – 开始索引，默认为0。<br>end – 结束索引，默认为字符串的长度。<br>返回值</p><p>如果包含子字符串返回开始的索引值，否则抛出异常。<br>str1 = “os373 example….wow!!!”<br>str2 = “exam”;</p><p>print (str1.index(str2))<br>print (str1.index(str2, 5))<br>print (str1.index(str2, 10))<br>6<br>6</p><hr><p>ValueError                                Traceback (most recent call last)</p><p> in ()<br>      4 print (str1.index(str2))<br>      5 print (str1.index(str2, 5))<br>—-&gt; 6 print (str1.index(str2, 10))</p><p>ValueError: substring not found<br>5.32 rindex(str, beg=0 end=len(string))<br>参数</p><p>str – 查找的字符串<br>beg – 开始查找的位置，默认为0<br>end – 结束查找位置，默认为字符串的长度。<br>返回值</p><p>返回子字符串 str 在字符串中最后出现的位置，如果没有匹配的字符串会报异常。<br>str1 = “os373 example….example wow!!!”<br>str2 = “exam”;</p><p>print (str1.rindex(str2))<br>print (str1.rindex(str2, 5))<br>print (str1.rindex(str2, 20))<br>17<br>17</p><hr><p>ValueError                                Traceback (most recent call last)</p><p> in ()<br>      4 print (str1.rindex(str2))<br>      5 print (str1.rindex(str2, 5))<br>—-&gt; 6 print (str1.rindex(str2, 20))</p><p>ValueError: substring not found<br>5.33 max(str) 和 min(str)<br>str1 = “os373”<br>print(“最大字符: “ + max(str1)) # 返回字符串中最大的字符<br>print(“最小字符: “ + min(str1)) # 返回字符串中最小的字符<br>最大字符: s<br>最小字符: 3<br>5.34 lstrip([chars])<br>参数</p><p>chars –指定截取的字符。<br>返回值</p><p>返回截掉字符串左边的空格或指定字符后生成的新字符串。<br>str1 = “     this is string example….wow!!!     “;<br>print(str1.lstrip());<br>str2 = “88888888this is string example….wow!!!8888888”;<br>print(str2.lstrip(‘8’));<br>this is string example….wow!!!<br>this is string example….wow!!!8888888<br>5.35 rstrip([chars])<br>参数</p><p>chars – 指定删除的字符（默认为空格）<br>返回值</p><p>返回删除 string 字符串末尾的指定字符后生成的新字符串。<br>str1 = “     this is string example….wow!!!     “;<br>print(str1.rstrip());<br>str2 = “88888888this is string example….wow!!!8888888”;<br>print(str2.rstrip(‘8’));<br>this is string example….wow!!!<br>88888888this is string example….wow!!!<br>5.36 strip([chars])<br>参数</p><p>chars – 移除字符串头尾指定的字符。<br>返回值</p><p>返回移除字符串头尾指定的字符生成的新字符串。<br>str1 = “     this is string example….wow!!!     “;<br>print(str1.strip());<br>str2 = “88888888this is string example….wow!!!8888888”;<br>print(str2.strip(‘8’));<br>this is string example….wow!!!<br>this is string example….wow!!!<br>5.37 replace(old, new [, max])<br>参数</p><p>old – 将被替换的子字符串。<br>new – 新字符串，用于替换old子字符串。<br>max – 可选字符串, 替换不超过 max 次<br>返回值</p><p>返回字符串中的 old（旧字符串） 替换成 new(新字符串)后生成的新字符串，如果指定第三个参数max，则替换不超过 max 次。<br>str1 = “<a href="http://www.os373.com&quot;" target="_blank" rel="noopener">www.os373.com&quot;</a><br>print (“藕丝空间旧地址：”, str1)<br>print (“藕丝空间新地址：”, str1.replace(“com”, “cn”))</p><p>str2 = “If you cover your mouth, the worry will run out of your eyes.”<br>print (str2.replace(“you”, “You”, 2)) # 只替换两次<br>藕丝空间旧地址： <a href="http://www.os373.com" target="_blank" rel="noopener">www.os373.com</a><br>藕丝空间新地址： <a href="http://www.os373.cn" target="_blank" rel="noopener">www.os373.cn</a><br>If You cover Your mouth, the worry will run out of your eyes.<br>5.38 split(str=””, num=string.count(str))<br>参数</p><p>str – 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。<br>num – 分割次数。<br>返回值</p><p>返回分割后的字符串列表。<br>str1 = “this is string \r example\n….wow!!!”<br>print (str1.split())<br>print (str1.split(‘i’,1))<br>print (str1.split(‘w’))<br>[‘this’, ‘is’, ‘string’, ‘example’, ‘….wow!!!’]<br>[‘th’, ‘s is string \r example\n….wow!!!’]<br>[‘this is string \r example\n….’, ‘o’, ‘!!!’]<br>5.39 splitlines([keepends])<br>参数</p><p>keepends – 在输出结果里是否去掉换行符(‘\r’, ‘\r\n’, \n’)，默认为 False，不包含换行符，如果为 True，则保留换行符。<br>返回值</p><p>返回一个包含各行作为元素的列表。<br>str1 = ‘ab c\n\nde fg\rkl\r\n’<br>print(str1.splitlines())<br>print(str1.splitlines(True))<br>[‘ab c’, ‘’, ‘de fg’, ‘kl’]<br>[‘ab c\n’, ‘\n’, ‘de fg\r’, ‘kl\r\n’]<br><!--more--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1 Python 字符串的 CRUD 操作&lt;br&gt;1.1 创建字符串&lt;br&gt;字符串是 Python 中最常用的数据类型。我们可以使用引号(‘或”)来创建字符串，或使用三引号来创建字符串文本段落（允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符）。&lt;br&gt;
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>纠正体态-圆肩</title>
    <link href="http://yoursite.com/2018/03/18/%E7%BA%A0%E6%AD%A3%E4%BD%93%E6%80%81-%E5%9C%86%E8%82%A9/"/>
    <id>http://yoursite.com/2018/03/18/纠正体态-圆肩/</id>
    <published>2018-03-18T11:55:05.000Z</published>
    <updated>2018-03-18T12:04:05.506Z</updated>
    
    <content type="html"><![CDATA[<p>讲健身呢是逃不过体态这块的。</p><p>好的体态是你拥有好身材的重中之重。可以这么说</p><blockquote><p>只要体态正常，你的身材就好过60%的人</p></blockquote><p>现代人多多少少都有点体态问题。假如你是个普通的瘦子/胖子，你是否经常感觉自己不如别的瘦子/胖子，别人有种瘦的干练/胖的扎实的感觉，而自己却逃不过瘦的病态/胖的邋遢。</p><p>原因是什么呢？一方面是别人可能有肌肉加持（这个你就认了吧），另一个大方面就是别人的体态比你好，没有放大缺点，反而让胖瘦变得无关紧要。</p><a id="more"></a><p><img src="http://oyvgzaycw.bkt.clouddn.com/IMG_0815.JPG" alt="此处输入图片的描述"></p><p>体态问题相当于是一个放大镜，你平时不注重身体形态可能一时半会看不出来，到了很严重的时候才发现，那时候其实已经属于中重度了。对于健身的人，尤其是在体脂低的时候问题就一览无遗，它会放大你的缺点。相对应的，正常体态越练越好看。体态不纠正，就开始重训，有氧训练的话，肌肉越多你越丑，这就是别人健身很好看，而你却越练越走形，从‘健美’变成‘健丑’。有氧无氧之后关节酸痛，一方面是动作不标准，肌肉关节代偿，更多的原因便是体态没纠正的情况下就开始训练，方向没选对，歪路越走越歪。</p><p>说了这么多，体态问题主要有3大块，上部体态，中部体态，下部体态。今天主要讲讲上部体态中的上交叉综合症中的<strong>圆肩现象</strong><br>主要原因有3点</p><ol><li>自身原因：自卑，不良习惯</li><li>肌力不平衡（今天主要讲这个）</li><li>紧张（有些人紧张起来全身都扭曲了）</li></ol><p>具体呢不想细说，直接上纠正方法</p><p><img src="http://oyvgzaycw.bkt.clouddn.com/IMG_0805.JPG" alt="此处输入图片的描述"><br><img src="http://oyvgzaycw.bkt.clouddn.com/IMG_0804.JPG" alt="此处输入图片的描述"><br><img src="http://oyvgzaycw.bkt.clouddn.com/IMG_0814.JPG" alt="此处输入图片的描述"></p><p>上面几张就是圆肩，经常伴随有头前伸，驼背等现象，都是上交叉综合症的症状。</p><p>圆肩在现代人中是出现比例较高的症状，大多出现在久坐人群，刚开始健身的小白之中。</p><p><img src="http://oyvgzaycw.bkt.clouddn.com/IMG_0817.JPG" alt="此处输入图片的描述"></p><p>这2片翅膀一样的就是肩胛骨，想必你们或多或少都知道，不懂的可以去百度，两侧间距一般为7-9CM。当间距大于9CM时，间距过大，肩胛向外向前移动，肩膀前缩，各种体态问题随之而来。</p><p>圆肩严重影响人的气质，一般的男神女神，圆了肩基本就残了，不过霉霉倒是个例外，可能长腿加持，莫非立式话筒太低趴下去成习惯导致的。小个子女生特别要注意体态，别人从上方看过去，身体呈半圆形，侧面看还显会胸小（男女都一样），更重要的<strong>显矮！</strong>，不只是驼背显矮，圆肩也特显矮，男性还显得猥琐。</p><p>你说你不关注外表，做个心灵美的宝宝就好了。<br>很遗憾，圆肩除了外表上的影响之外，还摧残你的内脏器官，影响你的心肺功能，毕竟人体本是一个大的平衡机构，一个小部件平衡不在，必然牵一发而动全身。</p><blockquote><p>一般表现为：颈椎酸痛，肩部麻木，腰背不适</p></blockquote><p>这些办公族常见疾病你熟悉吗？它们就是上交叉综合症的不良表现。</p><p>一旦出现圆肩，症状一般越来越严重，生活中的每一个小动作，小习惯可能都在加重症状，微小到平时走路双手拿着手机就会加剧病情。电脑前办公，视线过于低下，加剧圆肩，头前倾。健身小白，喜欢练胸，胸背不平衡，喜欢练胸便一直练胸，不平衡越来越严重，越练越迷惘，身体越来越走样，训练越来越没信心。久而久之，身材没练好，却丧失了训练热情。</p><p>有些朋友就说了不好判断，让身边的人看看其实一眼就看出来了，尤其开车的时候，侧面看过去，双肩好像要把方向盘吸进去了一样。自己照镜子可能刻意挺起胸膛不好判断。</p><p><strong>下面呢有个视频，是ATHLEAN-x讲的,youtube上很出名的视频主，能翻墙的朋友可以直接看视频，无视我下面的内容，后面就是视频截取的片段，方便不能翻墙的朋友</strong><br><a href="https://www.youtube.com/watch?v=oLwTC-lAJws" target="_blank" rel="noopener">点我</a></p><p>下面是我的人工搬运：</p><hr><h3 id="首先呢简单的判断下圆肩严重程度。"><a href="#首先呢简单的判断下圆肩严重程度。" class="headerlink" title="首先呢简单的判断下圆肩严重程度。"></a>首先呢简单的判断下圆肩严重程度。</h3><p><img src="http://oyvgzaycw.bkt.clouddn.com/20171202114911.gif" alt="此处输入图片的描述"></p><blockquote><p>双手握拳伸出大拇指置于两腿旁，然后自然举起，严重的朋友可能在肚子这双手就碰到了<br>不过不要紧张，这是可以治好的。</p></blockquote><h3 id="下面放纠正方法"><a href="#下面放纠正方法" class="headerlink" title="下面放纠正方法"></a>下面放纠正方法</h3><p><img src="http://oyvgzaycw.bkt.clouddn.com/20171202115154.gif" alt="此处输入图片的描述"></p><blockquote><p>伏地拉伸，主要是拉伸地上那边的</p></blockquote><p><img src="http://oyvgzaycw.bkt.clouddn.com/20171202115150.gif" alt="此处输入图片的描述"></p><blockquote><p>大同小异，也是拉伸紧张的胸小肌</p></blockquote><p><img src="http://oyvgzaycw.bkt.clouddn.com/20171202114821.gif" alt="此处输入图片的描述"><br><img src="http://oyvgzaycw.bkt.clouddn.com/20171202114959.gif" alt="此处输入图片的描述"><br><img src="http://oyvgzaycw.bkt.clouddn.com/20171202114816.gif" alt="此处输入图片的描述"></p><blockquote><p>这三个呢都用到了弹力绳，不要用太紧的，目的呢都是强化后侧肌群，一来一回就纠正过来了。</p></blockquote><p><strong>上面的几个动作，全程挺胸收腹，肩膀后张，不能耸肩<br>原理都是放松强的一方，强化弱的一方，达到平衡</strong></p><blockquote><p>过紧的肌肉:胸大肌、胸小肌、背阔肌、肩胛提肌、斜方肌上束、胸锁乳突肌、斜角肌</p><p>过弱的肌肉:菱形肌、斜方肌中下束、前锯肌、使肩外旋的肩袖肌群、深层颈屈肌</p></blockquote><p>身体解剖图我就不放了，放了你们也看不来，记不住。</p><p><img src="http://oyvgzaycw.bkt.clouddn.com/IMG_0816.JPG" alt="此处输入图片的描述"></p><blockquote><p>上班累了别忘了和椅子来个亲密接触。</p></blockquote><p>有关于不良的生活习惯，一时半会也改正不过来，只要注意不要刻意肩膀前引，耸肩驼背。体态纠正过来之后，慢慢的坏习惯就会消失。<br>希望这些动作能够加进你的训练计划中。<br>上面的几个动作都很基础，没有危险性，也不具有什么技巧，很多哑铃动作我都没有收录。<br>只想纠正体态的朋友也很方便，一条弹力绳就够了。<br>对于有在健身的朋友，给你们个忠告：<strong>不要只练镜子肌肉，真正让你身材变好看的，其实是背部肌群，三角后束。</strong> 把它和‘健身不练腿，迟早会阳尾’一起记到你的小本本上。<br>另外想偷懒的人，比如我。经常忘记做，推荐一个好动作，<strong>硬拉</strong>。 他是全是力量训练动作，也是潜在纠正型动作，它会不知不觉中纠正你的体态。谁做谁知道，毫不夸张的说。我的体态全靠它拉回来的。</p><p>以上就是全部内容<br>最后，祝您生活愉快！<br><!--more--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;讲健身呢是逃不过体态这块的。&lt;/p&gt;
&lt;p&gt;好的体态是你拥有好身材的重中之重。可以这么说&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只要体态正常，你的身材就好过60%的人&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现代人多多少少都有点体态问题。假如你是个普通的瘦子/胖子，你是否经常感觉自己不如别的瘦子/胖子，别人有种瘦的干练/胖的扎实的感觉，而自己却逃不过瘦的病态/胖的邋遢。&lt;/p&gt;
&lt;p&gt;原因是什么呢？一方面是别人可能有肌肉加持（这个你就认了吧），另一个大方面就是别人的体态比你好，没有放大缺点，反而让胖瘦变得无关紧要。&lt;/p&gt;
    
    </summary>
    
      <category term="健身" scheme="http://yoursite.com/categories/%E5%81%A5%E8%BA%AB/"/>
    
    
      <category term="体态" scheme="http://yoursite.com/tags/%E4%BD%93%E6%80%81/"/>
    
      <category term="上交叉综合症" scheme="http://yoursite.com/tags/%E4%B8%8A%E4%BA%A4%E5%8F%89%E7%BB%BC%E5%90%88%E7%97%87/"/>
    
      <category term="塑形" scheme="http://yoursite.com/tags/%E5%A1%91%E5%BD%A2/"/>
    
  </entry>
  
  <entry>
    <title>小试牛刀之硬拉</title>
    <link href="http://yoursite.com/2018/03/18/%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80%E4%B9%8B%E7%A1%AC%E6%8B%89/"/>
    <id>http://yoursite.com/2018/03/18/小试牛刀之硬拉/</id>
    <published>2018-03-18T11:34:17.000Z</published>
    <updated>2018-03-18T12:01:35.046Z</updated>
    
    <content type="html"><![CDATA[<p>硬拉五步法</p><p>废话不多说，直接进入今天的主题</p><p><strong>五个步骤让你学会传统硬拉</strong><br><a id="more"></a><br>0.准备工作</p><p>找到一根奥杠，不是你拿来二头弯举的短杆，也不是做肩推的短杆。它一般可以在卧推架或者深蹲架上找到，基本长这样</p><p><img src="http://oyvgzaycw.bkt.clouddn.com/%E8%BF%99%E6%A0%B7%E7%9A%84%E6%9D%A0%E9%93%83.jpg" alt="此处输入图片的描述"></p><p>接着两边各装上一片20KG的杠铃片，是的20KG的片，直径D=45.1CM。不是各两片10KG的片，也不是各四片5KG的片，就是<strong>各一片</strong>20KG的杠铃片。</p><p>一般男性第一次硬拉都能拉起一倍于自身体重的重量，女性或者没有60KG的男性，如果健身房有女士杠铃片，那么最好，请使用它。如果没有，请在杠铃下面垫上其他杠铃片，以达到20KG杠铃片的高度。</p><p>这是最低基本要求，不要嫌麻烦就不做。因为这涉及到柔韧性和正确的姿势。<strong>如果没达标导致受伤，概不负责</strong>。</p><p>OK至此，准备工作结束。</p><hr><h3 id="第一步-站姿"><a href="#第一步-站姿" class="headerlink" title="第一步-站姿"></a>第一步-站姿</h3><p><img src="http://oyvgzaycw.bkt.clouddn.com/%E7%AB%99%E5%A7%BF1.jpg" alt="此处输入图片的描述"></p><p><img src="http://oyvgzaycw.bkt.clouddn.com/%E6%9D%A0%E9%93%83%E4%BD%8D%E7%BD%AE.jpg" alt="此处输入图片的描述"></p><p>径直走过去，让杠铃处于你的脚掌中心正上方，两脚跟距离不大于肩宽约等于胯宽，脚尖外展，角度多大舒服展多大。</p><p><strong>从你的第一视角看如上面小白鞋，下图对号</strong></p><h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><ol><li>不是你能看到的鞋面（前脚掌）中间，而是你整个脚掌中间，所以杠铃应该是靠近你的脚踝，距离脚踝2.5-3.8cm（大约一个拳头），正处于足弓的正上方。</li><li>脚尖外展可适当放大，当一定不能不外展。</li><li>脚跟间距一般比你深蹲时的要窄那么一点</li></ol><h3 id="第二步-握姿"><a href="#第二步-握姿" class="headerlink" title="第二步-握姿"></a>第二步-握姿</h3><p><img src="http://oyvgzaycw.bkt.clouddn.com/%E6%AD%A3%E5%8F%8D%E6%8F%A1.jpg" alt="此处输入图片的描述"></p><p><img src="http://oyvgzaycw.bkt.clouddn.com/%E7%AB%99%E5%A7%BF2.jpg" alt="此处输入图片的描述"></p><p>站好之后，双手下垂，紧贴两腿，此时的双手间距就是你的握距，记住这个长度，然后<strong>直腿下弯腰</strong>，正手抓住杠铃，如果握力不够你可以像上图一样正反手抓握，此时你的背部是弯曲的，其实就是做直腿下压，涉及要柔韧性，也是为什么让你装20kg片的原因之一。</p><p><strong>在此时和接下来的三步中最重要的一点：你不要移动杠铃</strong></p><h3 id="第三步-膝盖前伸"><a href="#第三步-膝盖前伸" class="headerlink" title="第三步-膝盖前伸"></a>第三步-膝盖前伸</h3><p>现在，你应该是直腿弯腰抓着杠铃的样子，你的感觉应该是腿后侧有点点酸，腰背弯曲有点不适。</p><p>这时你自然前伸弯曲膝盖，千万注意<strong>不要</strong>主动下移屁股，仅以脚踝为支点，移动你的膝关节和胫骨（小腿），一旦胫骨和杠铃相碰就锁定髋部（屁股），然后外展膝关节与你的手肘相碰。</p><p><img src="http://oyvgzaycw.bkt.clouddn.com/%E8%87%AA%E7%84%B6%E7%BE%8E%E5%A5%B3.jpg" alt="此处输入图片的描述"></p><p>这时候你的下半身（髋部以下）就锁定了，从现在到开始硬拉下半身一直都是这个姿势，像个雕塑，一动都不能动。</p><h3 id="第四步-挺胸"><a href="#第四步-挺胸" class="headerlink" title="第四步-挺胸"></a>第四步-挺胸</h3><p>挺起你的胸廓，这时候能动的部位也不多了，想象你的胸部在双手之间向上向前升起，挺到什么程度呢，双手绷紧有拉扯感，整个腰椎收紧并处于收缩状。这时候你的背部会自动调整到正确的姿势（不坨不反弓）。眼睛注视前方3-4米<br>远的地面，下巴收起。</p><p><img src="http://oyvgzaycw.bkt.clouddn.com/%E6%8C%BA%E8%83%B8.jpg" alt="此处输入图片的描述"></p><blockquote><p>一定要挺胸到位，全身像一个蓄满力的弹簧</p></blockquote><p><img src="http://oyvgzaycw.bkt.clouddn.com/%E7%9C%8B%E5%9C%B0%E6%9D%BF.jpg" alt="此处输入图片的描述"></p><blockquote><p>不要看你的脚或者看镜子</p></blockquote><p>至此 预备姿势成型。</p><h3 id="第五步-硬拉"><a href="#第五步-硬拉" class="headerlink" title="第五步-硬拉"></a>第五步-硬拉</h3><p>深吸一口气，然后将杠铃向上拖拽到你的腿部。</p><p>注意是拖拽，意思就是摩擦着你的肉体上来。在整个过程一直与你的裤子或者腿有接触。</p><p><img src="http://oyvgzaycw.bkt.clouddn.com/%E6%8B%89%E8%B5%B7.jpg" alt="此处输入图片的描述"></p><blockquote><p>裤子有很明显的拖拽痕迹</p></blockquote><h4 id="怎么发力"><a href="#怎么发力" class="headerlink" title="怎么发力"></a>怎么发力</h4><p>想象双腿蹬地，接下来的一切都水到渠成了。</p><p>在达到顶部时，你只需要挺起胸部，不要向上向后耸肩，身体也不要后倾，只是挺胸。双眼略向下看，膝关节和髋部完全伸直，肩膀后收，可以象征性的夹一下屁股。</p><p><img src="http://oyvgzaycw.bkt.clouddn.com/%E9%A1%B6%E9%83%A8.jpg" alt="此处输入图片的描述"></p><blockquote><p>左一.后倾<br>左二.向后耸肩<br>右二.向上耸肩</p></blockquote><p>下放杠铃和拉起差不多，只是速度快了点，你甚至可以直接丢掉杠铃，但千万不要以为拉起就成功了，开始放松自己的身体，以错误的姿势下放杠铃。</p><h2 id="完整的流程："><a href="#完整的流程：" class="headerlink" title="完整的流程："></a>完整的流程：</h2><p><img src="http://oyvgzaycw.bkt.clouddn.com/%E5%AE%8C%E6%95%B4.JPG" alt="此处输入图片的描述"></p><h2 id="完整的流程-GIF尊享版："><a href="#完整的流程-GIF尊享版：" class="headerlink" title="完整的流程 GIF尊享版："></a>完整的流程 GIF尊享版：</h2><p><img src="http://oyvgzaycw.bkt.clouddn.com/v2-65d70210bf744e7fe89f29a0639d63ad_hd.gif" alt="此处输入图片的描述"></p><p><img src="http://oyvgzaycw.bkt.clouddn.com/v2-8e8910b9269eb0a0671cc4dd8951a666_hd.gif" alt="此处输入图片的描述"></p><p><img src="http://oyvgzaycw.bkt.clouddn.com/v2-67cb493b3cb4859f6fb35123d70c6fd3_hd.gif" alt="此处输入图片的描述"></p><p><img src="http://oyvgzaycw.bkt.clouddn.com/v2-dedcea737aec91018d989692293bc941_hd.gif" alt="此处输入图片的描述"></p><hr><p>个人见解，第二步第三步可以调换步骤，新手建议按部就班滴来 熟练了之后可以融为一步。</p><hr><blockquote><p>总结:<br>这大概是最简单的硬拉教程，我也不说什么肩膀处于杠铃前方，什么臀位拉高处于什么膝盖肩膀之间。<br>我想这些你都很难感受到，眼睛只有一双，不拍视频的话真的很难做到位。<br>那就对点训练吧，就像科目二考试，对好点，自己都不知道发生了什么，稀里糊涂得就通过了。<br>这个教程就是，只要你在训练时，心中列出这五个动作清单，到某个特定动作时，自我审查，认真落实好每一步，我就能保证你在拥有正常成年人力量的情况下做出一个标准的硬拉！</p></blockquote><p>最后，祝您生活愉快！<br><!--more--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;硬拉五步法&lt;/p&gt;
&lt;p&gt;废话不多说，直接进入今天的主题&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;五个步骤让你学会传统硬拉&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="健身" scheme="http://yoursite.com/categories/%E5%81%A5%E8%BA%AB/"/>
    
    
      <category term="硬拉" scheme="http://yoursite.com/tags/%E7%A1%AC%E6%8B%89/"/>
    
      <category term="三大项" scheme="http://yoursite.com/tags/%E4%B8%89%E5%A4%A7%E9%A1%B9/"/>
    
  </entry>
  
</feed>
